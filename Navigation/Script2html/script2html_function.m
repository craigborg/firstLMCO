function script2html(scriptFile)
% SCRIPT2HTML Publish script m-file to HTML.
%
%  SCRIPT2HTML(scriptFile)
%
%  SCRIPT2HTML generates an HTML document and its companion function m-file
%  managing the hyperlinks from the designated code segments contained in
%  the script file.
%
% Example:
%
%  >> script2html('foo')
%
%   where foo.m is a script file with 
%
%    % [begin]Test Hyperlink
%
%      <some code>
%
%    % [end] 
%
%   tags denoting code segments to be placed into the autogenerated 
%   companion function m-file with the name foo_links.m.
%
%   If code needs to go before the switch statement in your companion
%   function, create the following section in your script file
%
%    % [begin setup code]
%
%      <some code>
%
%    % [end setup code]
%
%   If you need to pass variables into or out of your companion function,
%   use the following reserved tags [[, ]], ((, )) to denote input and 
%   output variables.  Note, the only item that can have spaces is the
%   hyperlink statement
%
%    % [begin][[output1,output2]]Test Hyperlink((input1,input2))
%
%      varargout{1} = input1 - input2;
%      varargout{2} = input1 + input2;
%
%    % [end]
%
% See also PUBLISH.

% Author: Craig Borghesani <cborg@mathworks.com>

% do we have an extension
mExt = strfind(scriptFile, '.m');
if ~isempty(mExt),
   scriptFileNoExt = scriptFile(1:mExt-1);
   scriptFileExt = scriptFile;
else
   scriptFileNoExt = scriptFile;
   scriptFileExt = [scriptFile, '.m'];
end   

% open m-file script for reading
mScriptFID = fopen(scriptFileExt, 'r');

% open companion function (HTMLF) file for writing
mScriptFile_links = [scriptFileNoExt, '_links'];
mScript_linksFID = fopen([mScriptFile_links,'.m'], 'w');

% create first function line
fprintf(mScript_linksFID, 'function varargout = %s(linkClicked, varargin)\n\n', mScriptFile_links);

% open companion HTML publishable (HTMLP) file for writing
mScriptFile_html = [scriptFileNoExt, '_html'];
mScript_htmlFID = fopen([mScriptFile_html, '.m'], 'w');

% read each line, write to HTMLP and HTMLF
mScriptLine = fgetl(mScriptFID);
beginFlag = false;
setupFlag = false;
setupCodeExist = false;
linkCounter = 1;

while ischar(mScriptLine),

% test for beginning or ending of code segments
   setupLoc = strfind(mScriptLine, '[begin setup code]');
   endSetupLoc = strfind(mScriptLine, '[end setup code]');
   beginLoc = strfind(mScriptLine, '[begin]');
   endLoc = strfind(mScriptLine, '[end]');

% setup code segment beginning   
   if ~isempty(setupLoc) && isempty(endSetupLoc),
      
      setupFlag = true;
      setupCodeExist = true;
      
% setup code segment ending      
   elseif isempty(setupLoc) && ~isempty(endSetupLoc),
      
      fprintf(mScript_linksFID, 'switch linkClicked,\n');
      
      setupFlag = false;
      
% code segment beginning   
   elseif ~isempty(beginLoc) && isempty(endLoc),
      
% capture link label

% do we have any variables to pass into/outof our companion function
      curlyBraceBegin = strfind(mScriptLine, '((');
      curlyBraceEnd = strfind(mScriptLine, '))');
      vertBarBegin = strfind(mScriptLine, '[[');
      vertBarEnd = strfind(mScriptLine, ']]');
      if isempty(curlyBraceBegin) && isempty(vertBarBegin),
         linkLabel = mScriptLine(beginLoc+7:end);
      
% construct link line
         linkLine = sprintf('%% <matlab:%s(''link%d''); %s>', mScriptFile_links, linkCounter, linkLabel);
         
      elseif isempty(vertBarBegin),
         linkLabel = mScriptLine(beginLoc+7:curlyBraceBegin-1);
         variablesPassedIn = mScriptLine(curlyBraceBegin+2:curlyBraceEnd-1);
      
% construct link line
         linkLine = sprintf('%% <matlab:%s(''link%d'',%s); %s>', mScriptFile_links, linkCounter, variablesPassedIn, linkLabel);
         
      else
         variablesPassedOut = mScriptLine(vertBarBegin+2:vertBarEnd-1);
         linkLabel = mScriptLine(vertBarEnd+2:curlyBraceBegin-1);
         variablesPassedIn = mScriptLine(curlyBraceBegin+2:curlyBraceEnd-1);
      
% construct link line
         linkLine = sprintf('%% <matlab:[%s]=%s(''link%d'',%s); %s>', variablesPassedOut, mScriptFile_links, linkCounter, variablesPassedIn, linkLabel);
         
      end

% add switch statement if necessary
      if ~setupCodeExist,
         fprintf(mScript_linksFID, 'switch linkClicked,\n');
      end
      
% add case statement fo HTMLF file
      fprintf(mScript_linksFID, '\ncase(''link%d''),\n', linkCounter);
      beginFlag = true;
      linkCounter = linkCounter + 1;
      
% code segment ending      
   elseif isempty(beginLoc) && ~isempty(endLoc),
            
      fprintf(mScript_htmlFID, '%s\n', linkLine);

      beginFlag = false;
      
% write to HTMLF file      
   elseif setupFlag || beginFlag,
      fprintf(mScript_linksFID, '%s\n', mScriptLine);
      
% write to HTMLP file      
   else
      fprintf(mScript_htmlFID, '%s\n', mScriptLine);
      
   end
   
% get next line   
   mScriptLine = fgetl(mScriptFID);
   
end

% close out case statement
fprintf(mScript_linksFID, '\nend\n');

% end of file reached, close m-file script, HTMLP, and HTMLF
fclose(mScriptFID);
fclose(mScript_linksFID);
fclose(mScript_htmlFID);

% publish HTMLP
outFile = publish(mScriptFile_html, 'html');

% open HTMLP in browser
web(outFile);