function script2html(varargin)
% SCRIPT2HTML Publish script m-file to HTML.
%
%  SCRIPT2HTML(scriptFile)
%
%  SCRIPT2HTML generates an HTML document and its companion function m-file
%  managing the hyperlinks from the designated code segments contained in
%  the script file.
%
%  SCRIPT2HTML also accepts a cell-array of m-files which will each have
%  their own generated HTML document, but there will only be one companion
%  script file that manages the code for the links.
%
% Example:
%
%  >> script2html('foo')
%  >> script2html('foo.m', 'foo1.m')
%
%   where foo.m is a script file with 
%
%    % [mlbegin] Test Hyperlink
%
%      <some code>
%
%    % [mlend] 
%
%   tags denoting code segments to be placed into the autogenerated 
%   companion script m-file with the name foo_links.m.
%
%   If you would like your link to be in a bulleted list
%
%    % * [mlbegin] Test Hyperlink
%
%      <some code>
%
%    % [mlend]
%
%    % * Another bullet [mlbegin] Test Hyperlink
%
%       <some code>
%
%    % [mlend]
%
%   If you would like to also include your code within the HTML document
%   with the link following the displayed code
%
%    % [mlbegin:code] Test Hyperlink
%
%   If you would like to have each command be an individual link, do not
%   specify a link label.
%
%    % [mlbegin:code]
%
%   If you would like to include your code within the HTML document and 
%   also include the executed result of the code
%
%    % [mlbegin:execute] Test Hyperlink
%
% See also PUBLISH.

% Authors: Craig Borghesani <cborg@mathworks.com>, 
%          Mark Corless <mcorless@mathworks.com>

scriptFile = varargin;

% do we have an extension
for k = 1:length(scriptFile),
   mExt = strfind(scriptFile{k}, '.m');
   if ~isempty(mExt),
      scriptFileNoExt{k} = scriptFile{k}(1:mExt-1);
      scriptFileExt{k}   = scriptFile{k};
   else
      scriptFileNoExt{k} = scriptFile{k};
      scriptFileExt{k}   = [scriptFile{k}, '.m'];
   end
end

% open companion script (HTMLF) file for writing
mScriptFile_links = [scriptFileNoExt{1}, '_links'];
mScript_linksFID  = fopen([mScriptFile_links,'.m'], 'w');

% start switch statement
fprintf(mScript_linksFID, 'switch linkClicked,\n');

% initialize link counter
linkCounter = 1;

for k = 1:length(scriptFile),
   
% open m-file script(s) for reading
   mScriptFID = fopen(scriptFileExt{k}, 'r');

% open companion HTML publishable (HTMLP) file for writing
   mScriptFile_html{k} = [scriptFileNoExt{k}, '_html'];
   mScript_htmlFID = fopen([mScriptFile_html{k}, '.m'], 'w');

% read each line, write to HTMLP and HTMLF
   mScriptLine = fgetl(mScriptFID);
   
% initialize link options   
   beginFlag        = false;
   beginCodeFlag    = false;
   beginExecuteFlag = false;
   endFlag          = false;
   ellipsisFound    = false;

   while ischar(mScriptLine),

% test for beginning or ending of code segments
      beginLoc        = strfind(mScriptLine, '[mlbegin]');
      beginCodeLoc    = strfind(mScriptLine, '[mlbegin:code]');
      beginExecuteLoc = strfind(mScriptLine, '[mlbegin:execute]');
      endLoc          = strfind(mScriptLine, '[mlend]');

% code segment beginning   
      if (~isempty(beginLoc) || ~isempty(beginCodeLoc) || ~isempty(beginExecuteLoc)) && isempty(endLoc),

         beginFlag        = ~isempty(beginLoc);
         beginCodeFlag    = ~isempty(beginCodeLoc);
         beginExecuteFlag = ~isempty(beginExecuteLoc);
         endFlag          = ~isempty(endLoc); 
         
         emptyLabel       = false;
         linkPrinted      = false;

% capture link label
         if beginFlag,
            linkLabel     = mScriptLine(beginLoc+9:end);
            beforeLink    = mScriptLine(2:beginLoc-1);
            
         elseif beginCodeFlag,
            linkLabel     = mScriptLine(beginCodeLoc+14:end);
            beforeLink    = mScriptLine(2:beginCodeLoc-1);
            emptyLabel    = isempty(linkLabel);
            
         elseif beginExecuteFlag,
            linkLabel     = mScriptLine(beginExecuteLoc+17:end);
            beforeLink    = mScriptLine(2:beginExecuteLoc-1);
            
         end

         if ~emptyLabel,
% construct link line
            linkLine = sprintf('%%%s<matlab:linkClicked=''link%d'';%s; %s>', beforeLink, linkCounter, mScriptFile_links, strtrim(linkLabel));

% add case statement fo HTMLF file
            fprintf(mScript_linksFID, '\ncase(''link%d''),\n', linkCounter);
         
            linkCounter = linkCounter + 1;
         end
         
% code segment ending      
      elseif isempty(beginLoc) && isempty(beginCodeLoc) && isempty(beginExecuteLoc) && ~isempty(endLoc),

         if beginFlag || (beginCodeFlag && ~emptyLabel),
            fprintf(mScript_htmlFID, '%s\n', linkLine);
            linkPrinted = true;
         end

         beginFlag        = false;
         beginCodeFlag    = false;
         beginExecuteFlag = false;
         endFlag          = true;

% write to HTMLF file      
      elseif beginFlag || beginCodeFlag || beginExecuteFlag,
         
         if ~emptyLabel,
            fprintf(mScript_linksFID, '%s\n', mScriptLine);
         end
         
% remove all spaces
         noSpaceLine = mScriptLine(~isspace(mScriptLine));
         
         if beginCodeFlag && ~emptyLabel,
            
% print line as a comment if needed            
            if ~isempty(noSpaceLine) && noSpaceLine(1) == '%',
               fprintf(mScript_htmlFID, '%s\n', mScriptLine);
               
            else
               fprintf(mScript_htmlFID, '%% %s\n%%\n', mScriptLine);
               
            end
            
         elseif beginCodeFlag && emptyLabel,
            
% print line as a comment if needed            
            if ~isempty(noSpaceLine) && noSpaceLine(1) == '%',
               fprintf(mScript_htmlFID, '%s\n', mScriptLine);
               
            elseif isempty(noSpaceLine),
               fprintf(mScript_htmlFID, '%% %s\n', mScriptLine);
               
            else

               if ~ellipsisFound,
% add link to HTML file   
                  fprintf(mScript_htmlFID, '%% <matlab:linkClicked=''link%d'';%s; %s>\n%%\n', linkCounter, mScriptFile_links, mScriptLine);
               
% add code to script file 
                  fprintf(mScript_linksFID, '\ncase(''link%d''),\n', linkCounter);
                  linkCounter = linkCounter + 1;
               end

               fprintf(mScript_linksFID, '%s\n', mScriptLine);

               ellipsisFound = ~isempty(strfind(mScriptLine, '...'));
               
            end
            
         elseif beginExecuteFlag,
            
            if ((~isempty(noSpaceLine) && noSpaceLine(1) ~= '%') || ...
                isempty(noSpaceLine)) && ~linkPrinted,
               fprintf(mScript_htmlFID, '%%\n%s\n', linkLine);
               linkPrinted = true;
            end
          
            fprintf(mScript_htmlFID, '%s\n', mScriptLine);
            
         end

% write to HTMLP file      
      else
         fprintf(mScript_htmlFID, '%s\n', mScriptLine);

      end

% get next line   
      mScriptLine = fgetl(mScriptFID);

   end
   
% end of file reached, HTMLP, and HTMLF
   fclose(mScriptFID);
   fclose(mScript_htmlFID);

end

% close out case statement
fprintf(mScript_linksFID, '\nend\n');

% end of file reached, close m-file script
fclose(mScript_linksFID);

% publish HTMLP
for k = 1:length(scriptFile),
   outFile = publish(mScriptFile_html{k}, 'html');

% open HTMLP in browser
   web(outFile);
end   